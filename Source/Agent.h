#ifndef __AGENT__#define __AGENT__#ifdef __MACH__	//Building on a Mac	#include <GLUT/glut.h>#else	//Presumably building on Linux	#include <GL/glew.h>	#include <GL/glext.h>	#include <GL/gl.h>	#include <GL/glut.h>#endif#include <vector>using namespace std;class Prey;class Predator;class Agent{	public:		enum AgentType { UNKNOWN, PREY, PREDATOR };		enum Drive { DRIVE_COW, DRIVE_N_COG, DRIVE_N_VEL, DRIVE_AVOID,					DRIVE_COG, DRIVE_NN_DIST, DRIVE_EVADE,					DRIVE_HUNGER };				GLfloat _loc[3];		GLfloat _desiredVel[3];		GLfloat _actualVel[3];		GLfloat _speed;		GLfloat _stateColor[4];		GLfloat _color[4];				GLfloat _cowFrustration;		GLfloat _neighborsCogFrustration;		GLfloat _neighborsVelFrustration;		GLfloat _avoidanceFrustration;				Drive _dominantFrustrationType;		GLfloat _dominantFrustration;				GLfloat _tailPos;		bool _tailMovingForward;				static const GLfloat skMaxOtherAgentDetectDistSquared;		static GLfloat sAvoidanceDistSquared;				static GLfloat sWorldCenterStrength;		static GLfloat sNeighborCogStrength;		static GLfloat sNeighborVelocityStrength;		static GLfloat sAvoidanceStrength;				static const GLfloat skMaxCowFrustration;		static const GLfloat skMaxNeighborsCogFrustration;		static const GLfloat skMaxNeighborsVelFrustration;		static const GLfloat skMaxAvoidanceFrustration;				static const float skMaterialSpecular[];		static const float skMaterialShininess;				Agent();		virtual ~Agent();				virtual void draw() = 0;	//pure virtual		virtual void update(int idx, vector<Prey*> prey, vector<Predator*> predators, GLfloat preyCog[3], double secsTranspired) = 0;};#endif